networks:
  cloudfence_poc_network_g:
    name: cloudfence_poc_network_g
    driver: bridge

services:
  app:
    build: .
    container_name: cloudfence_poc_app_g
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - '${PORT}:${PORT}'
    environment:
      NODE_ENV: ${NODE_ENV}
      DOCKER_ENV: true
      PORT: ${PORT}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      HTTP_API_PREFIX: ${HTTP_API_PREFIX}
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB: ${PG_DB}
      ELASTIC_URL: ${ELASTIC_URL}
      ELASTIC_PORT: ${ELASTIC_PORT}
      REDIS_URL: ${REDIS_URL}
      REDIS_PORT: ${REDIS_PORT}
    depends_on:
      pgdb:
        condition: service_healthy
      elastic:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudfence_poc_network_g
    command: npm run start:dev

  pgdb:
    image: postgres:15
    container_name: cloudfence_postgres_g
    restart: always
    networks:
      - cloudfence_poc_network_g
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DB}
      TZ: 'UTC'
      PGTZ: 'UTC'
    ports:
      - '${PG_PORT}:${PG_PORT}'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    logging:
      driver: "none"
    container_name: cloudfence_elastic_g
    networks:
      - cloudfence_poc_network_g
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - '${ELASTIC_PORT}:${ELASTIC_PORT}'
    healthcheck:
      test: ["CMD", "curl", "-sS", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=1s"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    logging:
      driver: "none"
    container_name: cloudfence_redis_g
    networks:
      - cloudfence_poc_network_g
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
